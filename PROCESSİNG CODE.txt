import controlP5.*;

import processing.serial.*;



//

//Ayarlanabilir Deðiþkenler Baþlatýlýyor

//



// Konsol Hata Ayýklamayý Etkinleþtir

boolean debug = false;



// arduino serial port adresi atandý

static int serial_port_index = 4;  //2



// Robot Geometrisi

static float e = 5.4356;     // Tutucu üçgen mesafesi

static float f = 13.1572;     // Gövde Motorlar Arasý mesafe

static float re = 30.7086;    // Uzun Kol Uzunluðu

static float rf = 15.24;    // Kýza Kol Uzunluðu



//Servo hizalama ofset deðerleri

static int s1offset = -19;

static int s2offset = -22;

static int s3offset = 10;



// Eksenlerin ve açýlarýn sýnýr deðerleri

static float min_x = -20;

static float max_x = 20;

static float min_y = -20;

static float max_y = 80;

static float min_z = -200;

static float max_z = 10;

static float max_t = 30;

static float min_t = -100;



// Trigonometrik Sabitler

static float sqrt3 = sqrt(3.0);

static float pi = 3.141592653;    // PI

static float sin120 = sqrt3/2.0;

static float cos120 = -0.5;

static float tan60 = sqrt3;

static float sin30 = 0.5;

static float tan30 = 1/sqrt3;



static int precision = 100;

float xp = 0;

float yp = 0;

float zp =-20;

float t1 = 0;  //'theta' deðeri için servo açýsý

float t2 = 0;

float t3 = 0;



// Sýnýr Dýþý Bir Hamle Durumunda Bir Önceki Deðerler Atanýr

float last_x;

float last_y;

float last_z;

float last_t1;

float last_t2;

float last_t3;



boolean validPosition;

boolean servosEnabled = false;



Serial myPort;

ControlP5 controlP5;

PFont font;

Textfield xtext;

Textfield ytext;

Textfield ztext;

Slider2D xy;

Slider z;

Slider servo1;

Slider servo2;

Slider servo3;



void setup() {

  //Open Serial Baðlantýsý

  myPort = new Serial(this, Serial.list()[0], 9600);



  size(300,600);

  frameRate(25);

  controlP5 = new ControlP5(this);

  controlP5.setAutoInitialization(false);



  // X ekseni metin alaný

  xtext = controlP5.addTextfield("x",170,60,50,20);

  xtext.setId(1);

  xtext.setAutoClear(false);



  // Y ekseni metin alaný

  ytext = controlP5.addTextfield("y",170,100,50,20);

  ytext.setId(2);

  ytext.setAutoClear(false);



  //z ekseni metin alaný

  ztext = controlP5.addTextfield("z",170,140,50,20);

  ztext.setId(5);

  ztext.setAutoClear(false);



  //x-y Açýsý 2d Kaydýrýcýsý

  xy = controlP5.addSlider2D("x-y-axis",20,200,200,200);

  xy.setBroadcast(false); 

  xy.setId(3);

  xy.setMinX(0);

  xy.setMaxX(38);

  xy.setMinY(0);  //Xy kaydýrýcýsý Ýçin min deðeri

  xy.setMaxY(35);

  xy.setArrayValue(new float[] {20, 20});

  xy.setColorValueLabel(200);  //Yanlýþ etiketleri gizle



  //z ekseni kaydýrýcýsý

  z = controlP5.addSlider("z-axis",-100,-10,-45,230,200,15,200);

  z.setBroadcast(false); 

  z.setId(4);

  z.setSliderMode(Slider.FLEXIBLE);

  z.setColorValueLabel(200);



  //servo kaydýrýcýlarý

  servo1 = controlP5.addSlider("servo1", -100, 80, 0, 20, 460, 200, 15);

  servo1.setBroadcast(false); 

  servo1.setId(6);

  servo1.setSliderMode(Slider.FLEXIBLE);



  servo2 = controlP5.addSlider("servo2", -100, 80, 0, 20, 480, 200, 15);

  servo2.setBroadcast(false);

  servo2.setId(7);

  servo2.setSliderMode(Slider.FLEXIBLE);



  servo3 = controlP5.addSlider("servo3", -100, 80, 0, 20, 500, 200, 15);

  servo3.setBroadcast(false);

  servo3.setId(8);

  servo3.setSliderMode(Slider.FLEXIBLE);



  //Switch Aktif

  controlP5.addToggle("enable", false, 20, 20, 50, 20).setMode(ControlP5.SWITCH);



  updateGuiElements();
}



void draw() {

  background(200);

  if (servosEnabled) {

    fill(200);

    text("Tutucu Açýk", 100, 35); //gizle

    fill(#00bb00);

    text("Tutucu Kapalý", 100, 35); //göster

  } else {

    fill(200);

    text("Tutucu Kapalý", 100, 35); //gizle

    fill(#ff0000);

    text("Tutucu Açýk", 100, 35); //göster

  }

}



public void controlEvent(ControlEvent theEvent) {

  if ( debug ) {

    println("controlEvent: id: "+

          theEvent.controller().getId()+"\tname: "+

          theEvent.controller().getName()+"\tlabel: "+

          theEvent.controller().getLabel()+"\tvalue: "+

          theEvent.controller().getValue());

    println("xp: " + xp + "\typ: " + yp + "\tzp: " + zp + "\tt1: " + t1 + "\tt2: " + t2 + "\tt3: " + t3);

  }



  copyLastData(); //Geçmiþ Pozisyonlarý Yükle



  switch(theEvent.controller().getId()) {

    case (1): //X konumu metin alaný deðiþtirildi

      xp = Float.valueOf(xtext.getStringValue()).floatValue();

      setThetasfromXYZ();

    break;



    case (2): //Y konumu metin alaný deðiþtirildi


      yp = Float.valueOf(ytext.getStringValue()).floatValue();

      setThetasfromXYZ();

    break;



    case (5): //Z konumu metin alaný deðiþtirildi


      zp = Float.valueOf(ztext.getStringValue()).floatValue();

      setThetasfromXYZ();

    break;



    case (3): //XP ve YP konumu metin alaný deðiþtirildi


      xp = (xy.getArrayValue()[0] -20) * -1;  //Kayýdýrýcý 0,100 'ü, dönüþtür -50,50 'ye

      yp = (xy.getArrayValue()[1] -20) * -1;  //Kayýdýrýcý 0,100 'ü, dönüþtür -50,50 'ye

      setThetasfromXYZ();   

    break;



    case (4): //z kaydýrýcýsý

      zp = z.getValue();

      setThetasfromXYZ();

    break;



    case (6)://servo1 kaydýrýcýsý

      t1 = servo1.getValue();

      setXYZfromThetas();

    break;



    case (7)://servo2 kaydýrýcýsý

      t2 = servo2.getValue();

      setXYZfromThetas();

    break;



    case (8)://servo3 kaydýrýcýsý

      t3 = servo3.getValue();

      setXYZfromThetas();

    break;



  }

}



//Tanýmlanan yeni XYZ deðerleri hesaplayarak yeni Servo Açý deðerlerini bul

void setThetasfromXYZ() {

  if ( debug ) { println("Entering: setThetasfromXYZ()"); }

  //first bounds-check the input

  if (xp < min_x) { xp = min_x; }

  if (xp > max_x) { xp = max_x; }

  if (yp < min_y) { yp = min_y; }

  if (yp > max_y) { yp = max_y; }

  if (zp < min_z) { zp = min_z; }

  if (zp > max_z) { zp = max_z; }



  validPosition = true;

  //set the first angle

  float theta1 = delta_calcAngleYZ(xp, yp, zp);

  if (theta1 != 999) {

    float theta2 = delta_calcAngleYZ(xp*cos120 + yp*sin120, yp*cos120-xp*sin120, zp);  // Kordinatlarý +120 derece döndür

    if (theta2 != 999) {

      float theta3 = delta_calcAngleYZ(xp*cos120 - yp*sin120, yp*cos120+xp*sin120, zp);  // Kordinatlarý -120 derece döndür

      if (theta3 != 999) {

        if (theta1 <= max_t && theta2 <= max_t && theta3 <= max_t && theta1 >= min_t && theta2 >= min_t && theta3 >= min_t ) { //sýnýrlarý kontrol et

          t1 = theta1;

          t2 = theta2;

          t3 = theta3;

          SetServos();

        } else {

          validPosition = false;

        }



      } else {

        validPosition = false;

      }

    } else {

      validPosition = false;

    }

  } else {

    validPosition = false;

  }

  

  // Hata durumunda eski kordinatlarý gönder

  if ( !validPosition ) {

    xp = last_x;

    yp = last_y;

    zp = last_z;

  }

        

  // Gui elementlerini güncelle

  updateGuiElements();

  if ( debug ) { println("Exiting: setThetasfromXYZ()"); }

}


//ileri kinematik
// Yeni tanýmlanan açý deðerlerini hesaplayarak XYZ deðerlerini bul

void setXYZfromThetas() {

  if ( debug ) { println("Entering: setXYZfromThetas()"); }  

  validPosition = true;



  float t = (f-e)*tan30/2;

  float dtr = pi/(float)180.0;

 

  float theta1 = dtr*t1;

  float theta2 = dtr*t2;

  float theta3 = dtr*t3;

 

  float y1 = -(t + rf*cos(theta1));

  float z1 = -rf*sin(theta1);

   

  float y2 = (t + rf*cos(theta2))*sin30;

  float x2 = y2*tan60;

  float z2 = -rf*sin(theta2);

   

  float y3 = (t + rf*cos(theta3))*sin30;

  float x3 = -y3*tan60;

  float z3 = -rf*sin(theta3);

   

  float dnm = (y2-y1)*x3-(y3-y1)*x2;

   

  float w1 = y1*y1 + z1*z1;

  float w2 = x2*x2 + y2*y2 + z2*z2;

  float w3 = x3*x3 + y3*y3 + z3*z3;

   

  // x = (a1*z + b1)/dnm

  float a1 = (z2-z1)*(y3-y1)-(z3-z1)*(y2-y1);

  float b1 = -((w2-w1)*(y3-y1)-(w3-w1)*(y2-y1))/2.0;

   

  // y = (a2*z + b2)/dnm;

  float a2 = -(z2-z1)*x3+(z3-z1)*x2;

  float b2 = ((w2-w1)*x3 - (w3-w1)*x2)/2.0;

   

  // a*z^2 + b*z + c = 0

  float a = a1*a1 + a2*a2 + dnm*dnm;

  float b = 2*(a1*b1 + a2*(b2-y1*dnm) - z1*dnm*dnm);

  float c = (b2-y1*dnm)*(b2-y1*dnm) + b1*b1 + dnm*dnm*(z1*z1 - re*re);

  

  // discriminant

  float d = b*b - (float)4.0*a*c;

  if (d < 0) { validPosition = false; }



  zp = -(float)0.5*(b+sqrt(d))/a;

  xp = (a1*zp + b1)/dnm;

  yp = (a2*zp + b2)/dnm;



  if (xp >= min_x && xp <= max_x&& yp >= min_y && yp <= max_y && zp >= min_z & zp <= max_z) {  //sýnýrlarý kontrol et

  } else {

    validPosition = false;

  }



  if ( validPosition ) {   // Yeni pozisyon deðerlerini servolara gönder

    SetServos();

  } else {                 //Hata durumunda eski deðerleri ata

    xp = last_x;

    yp = last_y;

    zp = last_z;

    t1 = last_t1;

    t2 = last_t2;

    t3 = last_t3;

  }



  //Ýþlem Sonunda Gui elementlerini güncelle

  updateGuiElements();

  if ( debug ) { println("Exiting: setXYZfromThetas()"); }

}


void updateGuiElements() {

  if ( debug ) { println("Entering: updateGuiElements()"); } 

  // yeni deðerler için elementleri kapat

  xtext.setBroadcast(false);

  ytext.setBroadcast(false);

  ztext.setBroadcast(false);

  xy.setBroadcast(false);

  z.setBroadcast(false);

  servo1.setBroadcast(false);

  servo2.setBroadcast(false);

  servo3.setBroadcast(false);

 

  //Yeni deðerleri gui elementlerine ata

  xy.setArrayValue(new float[] {xp * -1 + 20, yp * -1 + 20});

  z.setValue(zp);

  xtext.setText(String.valueOf(Math.floor(xp * precision +.5)/precision));

  ytext.setText(String.valueOf(Math.floor(yp * precision +.5)/precision));

  ztext.setText(String.valueOf(Math.floor(zp * precision +.5)/precision));

  servo1.setValue(t1);

  servo2.setValue(t2);

  servo3.setValue(t3);

  

  //Elementleri etkinleþtir

  xtext.setBroadcast(true);

  ytext.setBroadcast(true);

  ztext.setBroadcast(true);

  xy.setBroadcast(true);

  z.setBroadcast(true);

  servo1.setBroadcast(true);

  servo2.setBroadcast(true);

  servo3.setBroadcast(true);

  if ( debug ) { println("Exiting: updateGuiElements()"); }

}



//Servo Pozisyon deðerlerini arduinoya gönder

void SetServos() {

  if ( debug ) { println("Entering: SetServos()"); }

  if (servosEnabled) {

    sendMove(1, (int)t1 + 90 + s1offset);  //math is -90 to +90, servo is 0 to 180

    sendMove(2, (int)t2 + 90 + s2offset);  //math is -90 to +90, servo is 0 to 180

    sendMove(3, (int)t3 + 90 + s3offset);  //math is -90 to +90, servo is 0 to 180

  }

  if ( debug ) { println("Exiting: SetServos()"); }

}



//Servolarý aktif yada pasif yap

void enable(boolean btnEnabled) {

  if ( debug ) { println("Entering: enable() (servos)"); }

  if ( btnEnabled==true ) {

    sendMove(99, 180); //Servolar aktif

    setThetasfromXYZ(); //xyz deðerlerini servolara uygula

    servosEnabled = true;

  } 

  else {

    sendMove(99, 0); //servolarý kapat

    servosEnabled = false;

  }

  if ( debug ) { println("Exiting: enable() (servos)"); }

}



//Serial port üzerinden arduinoya servo ve pozisyon deðerlerini ata

void sendMove(int servo, int val) {

  myPort.write(255);

  myPort.write(servo);

  myPort.write(val);

}



//Geçmiþ deðerleri atama fonksiyonu

void  copyLastData() {

  if ( debug ) { println("Entering: copyLastData()"); }

  last_x = xp;

  last_y = yp;

  last_z = zp;

  last_t1 = t1;

  last_t2 = t2;

  last_t3 = t3;

  if ( debug ) { println("Exiting: copyLastData()"); }

}



// Geri kinematik

float delta_calcAngleYZ(float x0, float y0, float z0) {

  float y1 = -0.5 * 0.57735 * f; // f/2 * tg 30

  y0 -= 0.5 * 0.57735    * e;    // Ortayý kenara kaydýr

  // z = a + b*y

  float a = (x0*x0 + y0*y0 + z0*z0 +rf*rf - re*re - y1*y1)/(2*z0);

  float b = (y1-y0)/z0;

  // diskiriminant

  float d = -(a+b*y1)*(a+b*y1)+rf*(b*b*rf+rf);

  if (d < 0) return 999; // mevcut olmayan nokta

  float yj = (y1 - a*b - sqrt(d))/(b*b + 1); // Dýþ noktayý seç

  float zj = a + b*yj;

  return 180.0*atan(-zj/(y1 - yj))/pi + ((yj>y1)?180.0:0.0);

}